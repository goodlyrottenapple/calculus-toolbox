{
	"calc_name" : "DEAK",

	"calc_structure" : {
		"Atprop" : {
			"Atprop" : {
				"type":"string",
				"ascii" : "_"
			},
			"Atprop_Freevar" : {
				"type" : "string",
				"isabelle" : "?\\<^sub>A _",
				"isabelle_se" : "_",
				"ascii" : "A? _",
				"latex" : "? _",
				"precedence": [320, 320],
				"shallow" : false
			}
		},

		"Agent" : {
			"Agent" : {
				"type":"string",
				"ascii" : "_"
			},
			"Agent_Freevar" : {
				"type" : "string",
				"isabelle" : "?\\<^sub>Ag _",
				"isabelle_se" : "_",
				"ascii" : "Ag? _",
				"latex" : "? _",
				"precedence": [320, 320],
				"shallow" : false
			}
		},

		"Action" : {
			"Action" : {
				"type":"string",
				"ascii" : "_"
			},
			"Action_Freevar" : {
				"type" : "string",
				"isabelle" : "?\\<^sub>Act _",
				"isabelle_se" : "_",
				"ascii" : "Act? _",
				"latex" : "? _",
				"precedence": [320, 320],
				"shallow" : false
			}
		},

		"Formula" : {
			"Formula_Atprop" : {
				"type": "Atprop",
				"isabelle" : "_ \\<^sub>F",
				"precedence": [320, 330]
			},

			"Formula_Agent" : {
				"type": "Agent",
				"parsable" : false,
				"shallow" : false
			},
			"Formula_Action" : {
				"type": "Action",
				"parsable" : false,
				"shallow" : false
			},

			"Formula_Zer" : {
				"type" : "Formula_Zer_Op",
				"isabelle" : "Z\\<^sub>F",
				"isabelle_se" : "_",
				"precedence": [340, 340]
			},

			"Formula_Freevar" : {
				"type" : "string",
				"isabelle" : "?\\<^sub>F _",
				"isabelle_se" : "_",
				"ascii" : "F? _",
				"latex" : "? _",
				"precedence": [340, 330],
				"shallow" : false
			},
			"Formula_Precondition" : {
				"type" : "Action",
				"isabelle" : "One\\<^sub>F _",
				"ascii" : "One _",
				"latex" : "1_{ _ }",
				"precedence": [340, 330]
			},
			"Formula_Bin" : {
				"type" : ["Formula", "Formula_Bin_Op", "Formula"],
				"isabelle" : "B\\<^sub>F _",
				"isabelle_se" : "_",
				"precedence": [330,330,330, 331]
			},
			"Formula_Agent_Formula" : {
				"type" : ["Formula_Agent_Formula_Op", "Agent", "Formula"],
				"isabelle" : "AgF\\<^sub>F _",
				"isabelle_se" : "_",
				"precedence": [330,330,330, 331]
			},
			"Formula_Action_Formula" : {
				"type" : ["Formula_Action_Formula_Op", "Action", "Formula"],
				"isabelle" : "ActF\\<^sub>F _",
				"isabelle_se" : "_",
				"precedence": [330,330,330, 331]
			}
		},
		"Formula_Agent_Formula_Op" : {
			"Formula_FdiamK" : {
				"isabelle" : "fdiamK\\<^sub>F",
				"ascii" : "fdiamK",
				"latex" : "\\langle_\\rangle"			},
			"Formula_BdiamK" : {
				"isabelle" : "bdiamK\\<^sub>F",
				"ascii" : "bdiamK",
				"latex" : "\\,\\rotatebox[origin=c]{90}{$\\langle\\rotatebox[origin=c]{-90}{$_$}\\rangle$}\\,"
			},
			"Formula_FboxK" : {
				"isabelle" : "fboxK\\<^sub>F",
				"ascii" : "fboxK",
				"latex" : "[_]"
			},
			"Formula_BboxK" : {
				"isabelle" : "bboxK\\<^sub>F",
				"ascii" : "bboxK",
				"latex" : "\\,\\rotatebox[origin=c]{90}{$[\\kern{1.8mu}\\rotatebox[origin=c]{-90}{$_$}\\kern{1.8mu}]$}\\,"
			}
		},
		"Formula_Action_Formula_Op" : {
			"Formula_FdiamA" : {
				"isabelle" : "fdiamA\\<^sub>F",
				"ascii" : "fdiamA",
				"latex" : "\\langle_\\rangle"
			},
			"Formula_BdiamA" : {
				"isabelle" : "bdiamA\\<^sub>F",
				"ascii" : "bdiamA",
				"latex" : "\\,\\rotatebox[origin=c]{90}{$\\langle\\rotatebox[origin=c]{-90}{$_$}\\rangle$}\\,"
			},
			"Formula_FboxA" : {
				"isabelle" : "fboxA\\<^sub>F",
				"ascii" : "fboxA",
				"latex" : "[_]"
			},
			"Formula_BboxA" : {
				"isabelle" : "bboxA\\<^sub>F",
				"ascii" : "bboxA",
				"latex" : "\\,\\rotatebox[origin=c]{90}{$[\\kern{1.8mu}\\rotatebox[origin=c]{-90}{$_$}\\kern{1.8mu}]$}\\,"
			}
		},

		"Formula_Zer_Op" : {
			"Formula_Top" : {
				"isabelle" : "\\<top>\\<^sub>F",
				"ascii" : "T",
				"latex" : "\\top"
			},
			"Formula_Bot" : {
				"isabelle" : "\\<bottom>\\<^sub>F",
				"ascii" : "B",
				"latex" : "\\bot"
			}
		},

		"Formula_Bin_Op" : {
			"Formula_And" : {
				"isabelle" : "\\<and>\\<^sub>F",
				"ascii" : "/\\",
				"latex" : "\\wedge",
				"ascii_precedence": [400, 401]
			},
			"Formula_Or" : {
				"isabelle" : "\\<or>\\<^sub>F",
				"ascii" : "\\/",
				"latex" : "\\vee",
				"ascii_precedence": [400, 401]
			},
			"Formula_ImpR" : {
				"isabelle" : "\\<rightarrow>\\<^sub>F",
				"ascii" : ">",
				"latex" : "\\rightarrow"
			},
			"Formula_DImpR" : {
				"isabelle" : ">-\\<^sub>F",
				"ascii" : ">-",
				"latex" : ">-"
			},
			"Formula_ImpL" : {
				"isabelle" : "\\<leftarrow>\\<^sub>F",
				"ascii" : "<",
				"latex" : "\\leftarrow"
			},
			"Formula_DImpL" : {
				"isabelle" : "-<\\<^sub>F",
				"ascii" : "-<",
				"latex" : "-<"
			}
		},

		"Structure" : {
			"Structure_Formula" : {
				"type": "Formula",
				"isabelle" : "_ \\<^sub>S",
				"precedence": [330, 340]
			},

			"Structure_Freevar" : {
				"type" : "string",
				"isabelle" : "?\\<^sub>S _",
				"isabelle_se" : "_",
				"ascii" : "? _",
				"latex" : "? _",
				"precedence": [340, 340],
				"shallow" : false
			},

			"Structure_Zer" : {
				"type" : "Structure_Zer_Op",
				"isabelle" : "Z\\<^sub>S",
				"isabelle_se" : "_",
				"precedence": [340, 340]
			},

			"Structure_Bin" : {
				"type" : ["Structure", "Structure_Bin_Op", "Structure"],
				"isabelle" : "B\\<^sub>S _",
				"isabelle_se" : "_",
				"precedence": [340,340,340, 341]
			},
			"Structure_Phi" : {
				"type" : "Action",
				"isabelle" : "Phi\\<^sub>S _",
				"ascii" : "Phi _",
				"latex" : "Phi( _ )",
				"precedence": [340, 330]
			},
			"Structure_Agent_Structure" : {
				"type" : ["Structure_Agent_Structure_Op", "Agent", "Structure"],
				"isabelle" : "AgS\\<^sub>S _",
				"isabelle_se" : "_",
				"precedence": [330,330,330, 331]
			},
			"Structure_Action_Structure" : {
				"type" : ["Structure_Action_Structure_Op", "Action", "Structure"],
				"isabelle" : "ActS\\<^sub>S _",
				"isabelle_se" : "_",
				"precedence": [330,330,330, 331]
			},

			"Structure_Bigcomma" : {
				"type" : ["Structure list"],
				"isabelle" : ";;\\<^sub>S _",
				"ascii" : ";; _",
				"latex" : "\\mbox{\\Large {\\bf ;}} _ ",
				"precedence": [330, 331]
			}
		},

		"Structure_Zer_Op" : {
			"Structure_Neutral" : {
				"isabelle" : "I\\<^sub>S",
				"ascii" : "I",
				"latex" : "I"
			}
		},

		"Structure_Bin_Op" : {
			"Structure_Comma" : {
				"isabelle" : ";\\<^sub>S",
				"ascii" : ";",
				"latex" : ";",
				"ascii_precedence": [400, 401]
			},
			"Structure_ImpR" : {
				"isabelle" : "\\<rightarrow>\\<^sub>S",
				"ascii" : ">>",
				"latex" : ">>"
			},
			"Structure_ImpL" : {
				"isabelle" : "\\<leftarrow>\\<^sub>S",
				"ascii" : "<<",
				"latex" : "<<"
			}
		},

		"Structure_Agent_Structure_Op" : {
			"Structure_ForwK" : {
				"isabelle" : "forwK\\<^sub>S",
				"ascii" : "forwK",
				"latex" : "\\{_\\}"
			},
			"Structure_BackK" : {
				"isabelle" : "backK\\<^sub>S",
				"ascii" : "backK",
				"latex" : "\\,\\rotatebox[origin=c]{90}{$\\{\\rotatebox[origin=c]{-90}{$_$}\\}$}\\,"
			}
		},
		"Structure_Action_Structure_Op" : {
			"Structure_ForwA" : {
				"isabelle" : "forwA\\<^sub>S",
				"ascii" : "forwA",
				"latex" : "\\{_\\}"
			},
			"Structure_BackA" : {
				"isabelle" : "backA\\<^sub>S",
				"ascii" : "backA",
				"latex" : "\\,\\rotatebox[origin=c]{90}{$\\{\\rotatebox[origin=c]{-90}{$_$}\\}$}\\,"
			}
		},

		"Sequent" : {
			"Sequent_Structure" : {
				"type": "Structure",
				"parsable" : false,
				"shallow" : false
			},

			"Sequent": {
				"type" : ["Structure", "Structure"],
				"isabelle" : "_ \\<turnstile>\\<^sub>S _",
				"ascii" : "_ |- _",
				"latex" : "_ {\\ {\\textcolor{magenta}\\boldsymbol{\\vdash}\\ } _",
				"precedence": [311,311, 310]
			}
		}
	},

	"calc_structure_rules" : {
		"RuleZer" : {
			"Id" : {
				"ascii" : "Id",
				"latex" : "Id"
			},

			"Atom" : {
				"ascii" : "Atom",
				"latex" : "Atom",
				"condition" : "atom"
			},

			"Prem" : {
				"ascii" : "Prem",
				"latex" : "Prem",
				"condition" : "(\\<lambda>x. seq = x)",
				"locale" : "Premise seq",
				"se" : false
			},

			"Partial" : {
				"ascii" : "Partial",
				"latex" : "Partial",
				"condition" : "(\\<lambda>x. (case x of Sequent lhs rhs => struct = lhs \\<or> struct = rhs ))",
				"locale" : "Part struct",
				"se" : false
			}
		},

		"RuleCut" : {
			"SingleCut" : {
				"ascii" : "Cut",
				"latex" : "Cut",
				"locale" : "CutFormula f",
				"premise" : "(\\<lambda>x. Some [((?\\<^sub>S ''X'') \\<turnstile>\\<^sub>S f \\<^sub>S),(f \\<^sub>S \\<turnstile>\\<^sub>S (?\\<^sub>S ''Y''))])",
				"se_rule" : "l \\<turnstile>d (X \\<turnstile>\\<^sub>S f \\<^sub>S) \\<Longrightarrow> l \\<turnstile>d (f \\<^sub>S \\<turnstile>\\<^sub>S Y) \\<Longrightarrow> l \\<turnstile>d (X \\<turnstile>\\<^sub>S Y)"
			}
		},


		"RuleStruct" : {
			"I_impL" : {
				"ascii" : "I_impL",
				"latex" : "I <_R"
			},
			"I_impL2" : {
				"ascii" : "I_impL2",
				"latex" : "I <_R"
			},
			"I_impR" : {
				"ascii" : "I_impR",
				"latex" : "I >_R"
			},

			"I_impR2" : {
				"ascii" : "I_impR2",
				"latex" : "I >_R"
			},
			"ImpL_I" : {
				"ascii" : "ImpL_I",
				"latex" : "<_R I"
			},

			"ImpL_I2" : {
				"ascii" : "ImpL_I2",
				"latex" : "<_R I"
			},
			"ImpR_I" : {
				"ascii" : "ImpR_I",
				"latex" : ">_R I"
			},

			"ImpR_I2" : {
				"ascii" : "ImpR_I2",
				"latex" : ">_R I"
			},

			"IW_L"  : {
				"ascii" : "IW_L",
				"latex" : "\\textrm{I} W_{L}"
			}, 	
			"IW_R"  : {
				"ascii" : "IW_R",
				"latex" : "\\textrm{I} W_{R}"
			}, 	
			"W_impL_L"  : {
				"ascii" : "W_impL_L",
				"latex" : "W <_L"
			},
			"W_impL_R"  : {
				"ascii" : "W_impL_R",
				"latex" : "W <_R"
			},
			"W_impR_L"  : {
				"ascii" : "W_impR_L",
				"latex" : "W >_L"
			},
			"W_impR_R"  : {
				"ascii" : "W_impR_R",
				"latex" : "W >_R"
			},
			"C_L"  : {
				"ascii" : "C_L",
				"latex" : "C_L"
			}, 		
			"C_R"  : {
				"ascii" : "C_R",
				"latex" : "C_R"
			}, 		
			"E_L"  : {
				"ascii" : "E_L",
				"latex" : "E_L"
			}, 		
			"E_R"  : {
				"ascii" : "E_R",
				"latex" : "E_R"
			}, 		
			"A_R"  : {
				"ascii" : "A_R",
				"latex" : "A_R"
			}, 		
			"A_R2"  : {
				"ascii" : "A_R2",
				"latex" : "A_R"
			}, 	
			"A_L"  : {
				"ascii" : "A_L",
				"latex" : "A_L"
			}, 		
			"A_L2" : {
				"ascii" : "A_L2",
				"latex" : "A_L"
			}
		},


		"RuleStructK" : {
			"Nec_K_L" : {
				"ascii" : "Nec_K_L",
				"latex" : "Nec_K_L"
			},
			"Nec_K_R" : {
				"ascii" : "Nec_K_R",
				"latex" : "Nec_K_R"
			},
			"K_nec_L" : {
				"ascii" : "K_nec_L",
				"latex" : "K_nec_L"
			},
			"K_nec_R" : {
				"ascii" : "K_nec_R",
				"latex" : "K_nec_R"
			},
			"FS_K_L" : {
				"ascii" : "FS_K_L",
				"latex" : "FS_K_L"
			},
			"FS_K_R" : {
				"ascii" : "FS_K_R",
				"latex" : "FS_K_R"
			},
			"Mon_K_L" : {
				"ascii" : "Mon_K_L",
				"latex" : "Mon_K_L"
			},
			"Mon_K_R" : {
				"ascii" : "Mon_K_R",
				"latex" : "Mon_K_R"
			},
			"K_FS_L" : {
				"ascii" : "K_FS_L",
				"latex" : "K_FS_L"
			},
			"K_FS_R" : {
				"ascii" : "K_FS_R",
				"latex" : "K_FS_R"
			},
			"K_mon_L" : {
				"ascii" : "K_mon_L",
				"latex" : "K_mon_L"
			},
			"K_mon_R" : {
				"ascii" : "K_mon_R",
				"latex" : "K_mon_R"
			}
		},


		"RuleStructAct" : {
			
			"Nec_A_L" : {
				"ascii" : "Nec_A_L",
				"latex" : "Nec_A_L"
			},
			"Nec_A_R" : {
				"ascii" : "Nec_A_R",
				"latex" : "Nec_A_R"
			},
			"A_nec_L" : {
				"ascii" : "A_nec_L",
				"latex" : "A_nec_L"
			},
			"A_nec_R" : {
				"ascii" : "A_nec_R",
				"latex" : "A_nec_R"
			},
			"FS_A_L" : {
				"ascii" : "FS_A_L",
				"latex" : "FS_A_L"
			},
			"FS_A_R" : {
				"ascii" : "FS_A_R",
				"latex" : "FS_A_R"
			},
			"Mon_A_L" : {
				"ascii" : "Mon_A_L",
				"latex" : "Mon_A_L"
			},
			"Mon_A_R" : {
				"ascii" : "Mon_A_R",
				"latex" : "Mon_A_R"
			},
			"A_FS_L" : {
				"ascii" : "A_FS_L",
				"latex" : "A_FS_L"
			},
			"A_FS_R" : {
				"ascii" : "A_FS_R",
				"latex" : "A_FS_R"
			},
			"A_mon_L" : {
				"ascii" : "A_mon_L",
				"latex" : "A_mon_L"
			},
			"A_mon_R" : {
				"ascii" : "A_mon_R",
				"latex" : "A_mon_R"
			}
		},


		"RuleStructEA" : {

			"Balance" : {
				"ascii" : "Balance",
				"latex" : "Balance"
			},
			"CompA_L" : {
				"ascii" : "CompA_L",
				"latex" : "CompA_L"
			},
			"CompA_R" : {
				"ascii" : "CompA_R",
				"latex" : "CompA_R"
			},
			"Reduce_L" : {
				"ascii" : "Reduce'L",
				"latex" : "Reduce'L"
			},
			"Reduce_R" : {
				"ascii" : "Reduce'R",
				"latex" : "Reduce'R"
			}
		},

		"RuleDisp" : {
			"Comma_impL_disp" : {
				"ascii" : "Comma_impL_disp",
				"latex" : "(;, <)"
			}, 					
			"Comma_impL_disp2" : {
				"ascii" : "Comma_impL_disp2",
				"latex" : "(;, <)"
			},
			"ImpL_comma_disp" : {
				"ascii" : "ImpL_comma_disp",
				"latex" : "(<, ;)"
			}, 					
			"ImpL_comma_disp2" : {
				"ascii" : "ImpL_comma_disp2",
				"latex" : "(<, ;)"
			},
			"Comma_impR_disp" : {
				"ascii" : "Comma_impR_disp",
				"latex" : "(;, >)"
			}, 					
			"Comma_impR_disp2" : {
				"ascii" : "Comma_impR_disp2",
				"latex" : "(;, >)"
			}, 				
			"ImpR_comma_disp" : {
				"ascii" : "ImpR_comma_disp",
				"latex" : "(>, ;)"
			}, 					
			"ImpR_comma_disp2" : {
				"ascii" : "ImpR_comma_disp2",
				"latex" : "(>, ;)"
			}
		},


		"RuleDispK" : {

			"Forw_back_K" : {
				"ascii" : "Forw_back_K",
				"latex" : "Forw_back_K"
			},
			"Forw_back_K2" : {
				"ascii" : "Forw_back_K2",
				"latex" : "Forw_back_K2"
			},
			"Back_forw_K" : {
				"ascii" : "Back_forw_K",
				"latex" : "Back_forw_K"
			},
			"Back_forw_K2" : {
				"ascii" : "Back_forw_K2",
				"latex" : "Back_forw_K2"
			}
		},


		"RuleDispAct" : {

			"Forw_back_A" : {
				"ascii" : "Forw_back_A",
				"latex" : "Forw_back_A"
			},
			"Forw_back_A2" : {
				"ascii" : "Forw_back_A2",
				"latex" : "Forw_back_A2"
			},
			"Back_forw_A" : {
				"ascii" : "Back_forw_A",
				"latex" : "Back_forw_A"
			},
			"Back_forw_A2" : {
				"ascii" : "Back_forw_A2",
				"latex" : "Back_forw_A2"
			}
			
		},

		"RuleGrish" : {
			"Grishin_L" : {
				"ascii" : "Grishin_L",
				"latex" : "Grishin_L"				
			},
			"Grishin_L2" : {
				"ascii" : "Grishin_L2",
				"latex" : "Grishin_L"				
			},
			"Grishin_R" : {
				"ascii" : "Grishin_R",
				"latex" : "Grishin_R"				
			},
			"Grishin_R2" : {
				"ascii" : "Grishin_R2",
				"latex" : "Grishin_R"				
			}
		},

		"RuleOp" : {
			"Bot_L" : {
				"ascii" : "Bot_L",
				"latex" : "\\bot_L"
			},
			"Bot_R" : {
				"ascii" : "Bot_R",
				"latex" : "\\bot_R"
			},
			"Top_L" : {
				"ascii" : "Top_L",
				"latex" : "\\top_L"
			},
			"Top_R" : {
				"ascii" : "Top_R",
				"latex" : "\\top_R"
			},
			"And_L" : {
				"ascii" : "And_L",
				"latex" : "\\wedge_L"
			},
			"And_R" : {
				"ascii" : "And_R",
				"latex" : "\\wedge_R"
			},
			"Or_L" : {
				"ascii" : "Or_L",
				"latex" : "\\vee_L"
			},
			"Or_R" : {
				"ascii" : "Or_R",
				"latex" : "\\vee_R"
			},
			"ImpL_L" : {
				"ascii" : "ImpL_L",
				"latex" : "\\leftarrow_L"
			},				
			"ImpL_R" : {
				"ascii" : "ImpL_R",
				"latex" : "\\leftarrow_R"
			},

			"DImpL_L" : {
				"ascii" : "DImpL_L",
				"latex" : "-<_L"
			},

			"DImpL_R" : {
				"ascii" : "DImpL_R",
				"latex" : "-<_R"
			},

			"ImpR_L" : {
				"ascii" : "ImpR_L",
				"latex" : "\\rightarrow_L"
			},				
			"ImpR_R" : {
				"ascii" : "ImpR_R",
				"latex" : "\\rightarrow_R"
			},

			"DImpR_L" : {
				"ascii" : "DImpR_L",
				"latex" : ">-_L"
			},

			"DImpR_R" : {
				"ascii" : "DImpR_R",
				"latex" : ">-_R"
			}
		},

		"RuleOpK" : {

			"FdiamK_L" : {
				"ascii" : "FdiamK_L",
				"latex" : "FdiamK_L"
			},
			"FdiamK_R" : {
				"ascii" : "FdiamK_R",
				"latex" : "FdiamK_R"
			},
			"FboxK_L" : {
				"ascii" : "FboxK_L",
				"latex" : "FboxK_L"
			},
			"FboxK_R" : {
				"ascii" : "FboxK_R",
				"latex" : "FboxK_R"
			},

			"BdiamK_L" : {
				"ascii" : "BdiamK_L",
				"latex" : "BdiamK_L"
			},
			"BdiamK_R" : {
				"ascii" : "BdiamK_R",
				"latex" : "BdiamK_R"
			},
			"BboxK_L" : {
				"ascii" : "BboxK_L",
				"latex" : "BboxK_L"
			},
			"BboxK_R" : {
				"ascii" : "BboxK_R",
				"latex" : "BboxK_R"
			}
		},

		"RuleOpAct" : {

			"FdiamA_L" : {
				"ascii" : "FdiamA_L",
				"latex" : "FdiamA_L"
			},
			"FdiamA_R" : {
				"ascii" : "FdiamA_R",
				"latex" : "FdiamA_R"
			},
			"FboxA_L" : {
				"ascii" : "FboxA_L",
				"latex" : "FboxA_L"
			},
			"FboxA_R" : {
				"ascii" : "FboxA_R",
				"latex" : "FboxA_R"
			},


			"BdiamA_L" : {
				"ascii" : "BdiamA_L",
				"latex" : "BdiamA_L"
			},
			"BdiamA_R" : {
				"ascii" : "BdiamA_R",
				"latex" : "BdiamA_R"
			},
			"BboxA_L" : {
				"ascii" : "BboxA_L",
				"latex" : "BboxA_L"
			},
			"BboxA_R" : {
				"ascii" : "BboxA_R",
				"latex" : "BboxA_R"
			},


			"One_L" : {
				"ascii" : "One_L",
				"latex" : "One_L"
			},
			"One_R" : {
				"ascii" : "One_R",
				"latex" : "One_R"
			},

			"Pre_L" : {
				"ascii" : "Pre_L",
				"latex" : "Pre_L",
				"condition" : "pre_l alpha",
				"premise" : "(\\<lambda>x. Some [(f \\<^sub>S \\<turnstile>\\<^sub>S (?\\<^sub>S ''Y''))])",
				"locale" : "PreFormula alpha f",
				"se_rule": "l \\<turnstile>d (f \\<^sub>S \\<turnstile>\\<^sub>S X) \\<Longrightarrow> l \\<turnstile>d ((One\\<^sub>F alpha)\\<^sub>S \\<turnstile>\\<^sub>S X)"
			},

			"Pre_R" : {
				"ascii" : "Pre_R",
				"latex" : "Pre_R",
				"condition" : "pre_r alpha",
				"premise" : "(\\<lambda>x. Some [((?\\<^sub>S ''Y'') \\<turnstile>\\<^sub>S f \\<^sub>S)])",
				"locale" : "PreFormula alpha f",
				"se_rule": "l \\<turnstile>d (X \\<turnstile>\\<^sub>S f \\<^sub>S) \\<Longrightarrow> l \\<turnstile>d (X \\<turnstile>\\<^sub>S (One\\<^sub>F alpha)\\<^sub>S)"
			}
		},

		"RuleSwapin" : {
			"Swapin_L" : {
				"ascii" : "swapin'L",
				"latex" : "swapin'L",
				"condition" : "swapin rel ((B\\<^sub>S (Phi\\<^sub>S (?\\<^sub>Act ''alpha'')) (;\\<^sub>S) (AgS\\<^sub>S (forwK\\<^sub>S) (?\\<^sub>Ag ''a'') (ActS\\<^sub>S (forwA\\<^sub>S) (?\\<^sub>Act ''beta'') (?\\<^sub>S ''X'')))) \\<turnstile>\\<^sub>S (?\\<^sub>S ''Y''))",
				"locale" : "RelAKA rel",
				"se_rule" : "l \\<turnstile>d (forwA\\<^sub>S alpha (forwK\\<^sub>S a X) \\<turnstile>\\<^sub>S Y) \\<Longrightarrow> beta \\<in> set (rel alpha a) \\<Longrightarrow> l \\<turnstile>d ((Phi\\<^sub>S alpha) ;\\<^sub>S (forwK\\<^sub>S a (forwA\\<^sub>S beta X)) \\<turnstile>\\<^sub>S Y)"
			},
			"Swapin_R" : {
				"ascii" : "swapin'R",
				"latex" : "swapin'R",
				"condition" : "swapin rel ((?\\<^sub>S ''Y'') \\<turnstile>\\<^sub>S (B\\<^sub>S (Phi\\<^sub>S (?\\<^sub>Act ''alpha'')) (\\<rightarrow>\\<^sub>S) (AgS\\<^sub>S (forwK\\<^sub>S) (?\\<^sub>Ag ''a'') (ActS\\<^sub>S (forwA\\<^sub>S) (?\\<^sub>Act ''beta'') (?\\<^sub>S ''X'')))))",
				"locale" : "RelAKA rel",
				"se_rule" : "l \\<turnstile>d (Y \\<turnstile>\\<^sub>S forwA\\<^sub>S alpha (forwK\\<^sub>S a X)) \\<Longrightarrow> beta \\<in> set (rel alpha a) \\<Longrightarrow> l \\<turnstile>d (Y \\<turnstile>\\<^sub>S (Phi\\<^sub>S alpha) \\<rightarrow>\\<^sub>S (forwK\\<^sub>S a (forwA\\<^sub>S beta X)))"
			}
		},
		"RuleSwapout" : {
			"Swapout_L" : {
				"ascii" : "swapout'L",
				"latex" : "swapout'L",
				"locale" : "RelAKA rel",
				"premise" : "swapout_L rel",
				"se_rule" : "(\\<forall> Y \\<in> (set Ys). \\<exists>beta \\<in> set (rel alpha a). (l \\<turnstile>d forwK\\<^sub>S a (forwA\\<^sub>S beta X) \\<turnstile>\\<^sub>S Y) ) \\<Longrightarrow> l \\<turnstile>d forwA\\<^sub>S alpha (forwK\\<^sub>S a X) \\<turnstile>\\<^sub>S ;;\\<^sub>S Ys"
			},
			"Swapout_R" : {
				"ascii" : "Swapout'R",
				"latex" : "Swapout'R",
				"locale" : "RelAKA rel",
				"premise" : "swapout_R rel",
				"se_rule" : "(\\<forall> Y \\<in> (set Ys). \\<exists>beta \\<in> set (rel alpha a). (l \\<turnstile>d Y \\<turnstile>\\<^sub>S forwK\\<^sub>S a (forwA\\<^sub>S beta X)) ) \\<Longrightarrow> l \\<turnstile>d  ;;\\<^sub>S Ys \\<turnstile>\\<^sub>S forwA\\<^sub>S alpha (forwK\\<^sub>S a X)"
			}
		},

		"RuleBigcomma" : {
			"Bigcomma_Nil_L" : {
				"ascii" : "Bigcomma_Nil_L",
				"latex" : "Bigcomma_Nil_L"
			},
			"Bigcomma_Nil_L2" : {
				"ascii" : "Bigcomma_Nil_L2",
				"latex" : "Bigcomma_Nil_L"
			},
			"Bigcomma_Nil_R" : {
				"ascii" : "Bigcomma_Nil_R",
				"latex" : "Bigcomma_Nil_R"
			},
			"Bigcomma_Nil_R2" : {
				"ascii" : "Bigcomma_Nil_R2",
				"latex" : "Bigcomma_Nil_R"
			},
			"Bigcomma_Cons_L" : {
				"ascii" : "Bigcomma_Cons_L",
				"latex" : "Bigcomma_Cons_L",
				"premise" : "bigcomma_cons_L",
				"se_rule" : "l \\<turnstile>d (;;\\<^sub>S(X # Xs) \\<turnstile>\\<^sub>S Y) \\<Longrightarrow> l \\<turnstile>d (X ;\\<^sub>S (;;\\<^sub>S Xs) \\<turnstile>\\<^sub>S Y)"
			},
			"Bigcomma_Cons_L2" : {
				"ascii" : "Bigcomma_Cons_L2",
				"latex" : "Bigcomma_Cons_L",
				"premise" : "bigcomma_cons_L2",
				"se_rule" : "l \\<turnstile>d (X ;\\<^sub>S (;;\\<^sub>S Xs) \\<turnstile>\\<^sub>S Y) \\<Longrightarrow> l \\<turnstile>d (;;\\<^sub>S(X # Xs) \\<turnstile>\\<^sub>S Y)"
			},
			"Bigcomma_Cons_R" : {
				"ascii" : "Bigcomma_Cons_R",
				"latex" : "Bigcomma_Cons_R",
				"premise" : "bigcomma_cons_R",
				"se_rule" : "l \\<turnstile>d (Y \\<turnstile>\\<^sub>S ;;\\<^sub>S(X # Xs)) \\<Longrightarrow> l \\<turnstile>d (Y \\<turnstile>\\<^sub>S X ;\\<^sub>S (;;\\<^sub>S Xs))"
			},
			"Bigcomma_Cons_R2" : {
				"ascii" : "Bigcomma_Cons_R2",
				"latex" : "Bigcomma_Cons_R",
				"premise" : "bigcomma_cons_R2",
				"se_rule" : "l \\<turnstile>d (Y \\<turnstile>\\<^sub>S X ;\\<^sub>S (;;\\<^sub>S Xs)) \\<Longrightarrow> l \\<turnstile>d (Y \\<turnstile>\\<^sub>S ;;\\<^sub>S(X # Xs))"
			}
		},

		"RuleKnowledge" : {
			"Refl_ForwK" : {
				"ascii" : "Refl_ForwK",
				"latex" : "Refl_FboxK",
				"locale" : "LAgent a",
				"premise" : "(\\<lambda>x. Some [((?\\<^sub>S ''X'') \\<turnstile>\\<^sub>S (AgS\\<^sub>S (forwK\\<^sub>S) a (?\\<^sub>S ''Y'')))])"
			}
		}
	},

	"rules" : {
		"RuleZer" : {
			"Id" : 				["A?p |- A?p",				""],
			"Atom" : 			["?X |- ?Y",				""],
			"Prem" : 			["?X |- ?Y",				""],
			"Partial" : 		["?X |- ?Y",				""]
		},
		"RuleStruct" : {
			"I_impL" : 			["I |- ?Y << ?X", 			"?X |- ?Y"],
			"I_impL2" : 		["?X |- ?Y",				"I |- ?Y << ?X"],
			"I_impR" : 			["I |- ?X >> ?Y", 			"?X |- ?Y"],
			"I_impR2" : 		["?X |- ?Y",				"I |- ?X >> ?Y"],
			
			"ImpL_I" : 			["?X << ?Y |- I",			"?X |- ?Y"],
			"ImpL_I2" : 		["?X |- ?Y", 				"?X << ?Y |- I"],
			"ImpR_I" : 			["?Y >> ?X |- I",			"?X |- ?Y"],
			"ImpR_I2" : 		["?X |- ?Y", 				"?Y >> ?X |- I"],

			"IW_L" : 			["?X |- ?Y", 				"I |- ?Y"],
			"IW_R" : 			["?X |- ?Y", 				"?X |- I"],

			"W_impL_L" :		["?Y |- ?Z << ?X", 			"?X |- ?Z"],			
			"W_impL_R" :		["?X << ?Z |- ?Y", 			"?X |- ?Z"],
			"W_impR_L" :		["?Z >> ?X |- ?Y", 			"?X |- ?Z"],
			"W_impR_R" :		["?Y |- ?X >> ?Z", 			"?X |- ?Z"],

			"C_L" : 			["?X |- ?Y", 				"?X ; ?X |- ?Y"],
			"C_R" : 			["?X |- ?Y", 				"?X |- ?Y ; ?Y"],
			"E_L" : 			["?X2 ; ?X1 |- ?Y", 		"?X1 ; ?X2 |- ?Y"],
			"E_R" : 			["?X |- ?Y2 ; ?Y1", 		"?X |- ?Y1 ; ?Y2"],
			"A_R" : 			["?W |- ?X ; (?Y ; ?Z)",	"?W |- (?X ; ?Y) ; ?Z"],
			"A_R2" : 			["?W |- (?X ; ?Y) ; ?Z",	"?W |- ?X ; (?Y ; ?Z)"],
			"A_L" : 			["?X ; (?Y ; ?Z) |- ?W",	"(?X ; ?Y) ; ?Z |- ?W"],
			"A_L2" : 			["(?X ; ?Y) ; ?Z |- ?W",	"?X ; (?Y ; ?Z) |- ?W"]
		},


		"RuleStructK" : {
			"Nec_K_L" :			["forwK Ag?a I |- ?X", 		"I |- ?X"],
			"Nec_K_R" :			["?X |- forwK Ag?a I", 		"?X |- I"],
			"K_nec_L" :			["backK Ag?a I |- ?X", 		"I |- ?X"],
			"K_nec_R" :			["?X |- backK Ag?a I", 		"?X |- I"],

			"FS_K_L" :			["forwK Ag?a (?Y >> ?Z) |- ?X", 		"(forwK Ag?a ?Y) >> (forwK Ag?a ?Z) |- ?X"],
			"FS_K_R" :			["?X |- forwK Ag?a (?Y >> ?Z)", 		"?X |- (forwK Ag?a ?Y) >> (forwK Ag?a ?Z)"],
			"Mon_K_L" :			["forwK Ag?a (?X ; ?Y) |- ?Z", 			"(forwK Ag?a ?X) ; (forwK Ag?a ?Y) |- ?Z"],
			"Mon_K_R" :			["?Z |- forwK Ag?a (?X ; ?Y)", 			"?Z |- (forwK Ag?a ?X) ; (forwK Ag?a ?Y)"],

			"K_FS_L" :			["backK Ag?a (?Y >> ?Z) |- ?X", 		"(backK Ag?a ?Y) >> (backK Ag?a ?Z) |- ?X"],
			"K_FS_R" :			["?X |- backK Ag?a (?Y >> ?Z)", 		"?X |- (backK Ag?a ?Y) >> (backK Ag?a ?Z)"],
  			"K_mon_L" : 		["backK Ag?a (?X ; ?Y) |- ?Z", 			"(backK Ag?a ?X) ; (backK Ag?a ?Y) |- ?Z"],
  			"K_mon_R" : 		["?Z |- backK Ag?a (?X ; ?Y)", 			"?Z |- (backK Ag?a ?X) ; (backK Ag?a ?Y)"]

  		},


		"RuleStructAct" : {
  			"Nec_A_L" :			["forwA Act?a I |- ?X",		"I |- ?X"],
  			"Nec_A_R" :			["?X |- forwA Act?a I", 	"?X |- I"],
  			"A_nec_L" :			["backA Act?a I |- ?X", 	"I |- ?X"],
  			"A_nec_R" :			["?X |- backA Act?a I", 	"?X |- I"],

  			"FS_A_L" :			["forwA Act?a (?Y >> ?Z) |- ?X", 		"(forwA Act?a ?Y) >> (forwA Act?a ?Z) |- ?X"],
  			"FS_A_R" :			["?X |- forwA Act?a (?Y >> ?Z)", 		"?X |- (forwA Act?a ?Y) >> (forwA Act?a ?Z)"],

  			"Mon_A_L" :			["forwA Act?a (?X ; ?Y) |- ?Z", 		"(forwA Act?a ?X) ; (forwA Act?a ?Y) |- ?Z"],
  			"Mon_A_R" :			["?Z |- forwA Act?a (?X ; ?Y)", 		"?Z |- forwA Act?a ?X ; forwA Act?a ?Y"],
  			"A_FS_L" :			["backA Act?a (?Y >> ?Z) |- ?X", 		"(backA Act?a ?Y) >> (backA Act?a ?Z) |- ?X"],
  			"A_FS_R" :			["?X |- backA Act?a (?Y >> ?Z)", 		"?X |- (backA Act?a ?Y) >> (backA Act?a ?Z)"],
  			"A_mon_L" :			["backA Act?a (?X ; ?Y) |- ?Z", 		"(backA Act?a ?X) ; (backA Act?a ?Y) |- ?Z"],
  			"A_mon_R" :			["?Z |- backA Act?a (?X ; ?Y)", 		"?Z |- (backA Act?a ?X) ; (backA Act?a ?Y)"]
  		},


		"RuleStructEA" : {
  			"Balance" :			["forwA Act?a ?X |- forwA Act?a ?Y", 	"?X |- ?Y"],
  			"CompA_L" :			["(Phi Act?a) ; ?X |- ?Y", 				"forwA Act?a (backA Act?a ?X) |- ?Y"],
  			"CompA_R" :			["?Y |- (Phi Act?a) >> ?X", 			"?Y |- forwA Act?a (backA Act?a ?X)"],
  			"Reduce_L" :		["forwA Act?a ?X |- ?Y", 				"(Phi Act?a) ; forwA Act?a ?X |- ?Y"],
  			"Reduce_R" :		["?Y |- forwA Act?a ?X", 				"?Y |- (Phi Act?a) >> (forwA Act?a ?X)"]

		},
		"RuleDisp" : {
			"Comma_impL_disp" :	["?X |- ?Z << ?Y", 			"?X ; ?Y |- ?Z"],
			"Comma_impL_disp2" :["?X ; ?Y |- ?Z", 			"?X |- ?Z << ?Y"],
			"Comma_impR_disp" :	["?Y |- ?X >> ?Z", 			"?X ; ?Y |- ?Z"],
			"Comma_impR_disp2" :["?X ; ?Y |- ?Z", 			"?Y |- ?X >> ?Z"],

			"ImpL_comma_disp" :	["?Z << ?Y |- ?X", 			"?Z |- ?X ; ?Y"],
			"ImpL_comma_disp2" :["?Z |- ?X ; ?Y", 			"?Z << ?Y |- ?X"],

			"ImpR_comma_disp" :	["?X >> ?Z |- ?Y", 			"?Z |- ?X ; ?Y"],
			"ImpR_comma_disp2" :["?Z |- ?X ; ?Y", 			"?X >> ?Z |- ?Y"]
		},

		"RuleDispK" : {

			"Forw_back_K" :		["?X |- backK Ag?a ?Y", 	"forwK Ag?a ?X |- ?Y"],
			"Forw_back_K2" :	["forwK Ag?a ?X |- ?Y", 	"?X |- backK Ag?a ?Y"],
			"Back_forw_K" : 	["backK Ag?a ?X |- ?Y", 	"?X |- forwK Ag?a ?Y"],
			"Back_forw_K2" : 	["?X |- forwK Ag?a ?Y", 	"backK Ag?a ?X |- ?Y"]
		},


		"RuleDispAct" : {
			"Forw_back_A" :		["?X |- backA Act?a ?Y", 	"forwA Act?a ?X |- ?Y"],
			"Forw_back_A2" :	["forwA Act?a ?X |- ?Y", 	"?X |- backA Act?a ?Y"],
			"Back_forw_A" :		["backA Act?a ?X |- ?Y", 	"?X |- forwA Act?a ?Y"],
			"Back_forw_A2" :	["?X |- forwA Act?a ?Y", 	"backA Act?a ?X |- ?Y"]

		},
		"RuleGrish" : {
			"Grishin_L" :		["(?X >> ?Y); ?Z |- ?W", 	"?X >> (?Y ; ?Z) |- ?W"],
			"Grishin_L2" :		["?X >> (?Y ; ?Z) |- ?W", 	"(?X >> ?Y); ?Z |- ?W"],

			"Grishin_R" :		["?W |- (?X >> ?Y) ; ?Z", 	"?W |- ?X >> (?Y ; ?Z)"],
			"Grishin_R2" :		["?W |- ?X >> (?Y ; ?Z)", 	"?W |- (?X >> ?Y) ; ?Z"]
		},
		"RuleOp" : {
			"Bot_L" :			["B |- I", 		""],
			"Bot_R" :			["?X |- B", 		"?X |- I"],
			"Top_L" :			["T |- ?X", 		"I |- ?X"],
			"Top_R" :			["I |- T", 		""],

			"And_L" :			["F?A /\\ F?B |- ?Z", 		"F?A ; F?B |- ?Z"],
			"And_R" :			["?X ; ?Y |- F?A /\\ F?B",	"?X |- F?A", 	"?Y |- F?B"],

			"Or_L" :			["F?A \\/ F?B |- ?X ; ?Y",	"F?A |- ?X", 	"F?B |- ?Y"],
			"Or_R" :			["?Z |- F?A \\/ F?B", 		"?Z |- F?A ; F?B"],

			"ImpL_L" :			["F?B < F?A |- ?Y << ?X",	"?X |- F?A", 	"F?B |- ?Y"],
			"ImpL_R" :			["?Z |- F?B < F?A", 		"?Z |- F?B << F?A"],

			"DImpL_L" :			["F?B -< F?A |- ?Z", 		"F?B << F?A |- ?Z"],
			"DImpL_R" :			["?Y << ?X |- F?B -< F?A",	"F?A |- ?X", 	"?Y |- F?B"],

			"ImpR_L" :			["F?A > F?B |- ?X >> ?Y",	"?X |- F?A", 	"F?B |- ?Y"],
			"ImpR_R" :			["?Z |- F?A > F?B", 		"?Z |- F?A >> F?B"],

			"DImpR_L" :			["F?A >- F?B |- ?Z", 		"F?A >> F?B |- ?Z"],
			"DImpR_R" :			["?X >> ?Y |- F?A >- F?B",	"F?A |- ?X", 	"?Y |- F?B"]
		},

		"RuleOpK" : {
			"FdiamK_L" :		["fdiamK Ag?a F?A |- ?X",	"forwK Ag?a F?A |- ?X"],
			"FdiamK_R" :		["forwK Ag?a ?X |- fdiamK Ag?a F?A",	"?X |- F?A"],
			"FboxK_L" :			["fboxK Ag?a F?A |- forwK Ag?a ?X",		"F?A |- ?X"],
			"FboxK_R" :			["?X |- fboxK Ag?a F?A",	"?X |- forwK Ag?a F?A"],

			"BdiamK_L" :		["bdiamK Ag?a F?A |- ?X",	"backK Ag?a F?A |- ?X"],
			"BdiamK_R" :		["backK Ag?a ?X |- bdiamK Ag?a F?A",	"?X |- F?A"],
			"BboxK_L" :			["bboxK Ag?a F?A |- backK Ag?a ?X",		"F?A |- ?X"],
			"BboxK_R" :			["?X |- bboxK Ag?a F?A",	"?X |- backK Ag?a F?A"]
		},

		"RuleOpAct" : {
			"FdiamA_L" :		["fdiamA Act?alpha F?A |- ?X",					"forwA Act?alpha F?A |- ?X"],
			"FdiamA_R" :		["forwA Act?alpha ?X |- fdiamA Act?alpha F?A",	"?X |- F?A"],
			"FboxA_L" :			["fboxA Act?alpha F?A |- forwA Act?alpha ?X",	"F?A |- ?X"],
			"FboxA_R" :			["?X |- fboxA Act?alpha F?A",					"?X |- forwA Act?alpha F?A"],

			"BdiamA_L" :		["bdiamA Act?alpha F?A |- ?X",					"backA Act?alpha F?A |- ?X"],
			"BdiamA_R" :		["backA Act?alpha ?X |- bdiamA Act?alpha F?A",	"?X |- F?A"],
			"BboxA_L" :			["bboxA Act?alpha F?A |- backA Act?alpha ?X",	"F?A |- ?X"],
			"BboxA_R" :			["?X |- bboxA Act?alpha F?A",					"?X |- backA Act?alpha F?A"],

			"One_L" :			["One Act?alpha |- ?X",							"Phi Act?alpha |- ?X"],
			"One_R" :			["Phi Act?alpha |- One Act?alpha",				""],
			"Pre_L" :			["?X |- ?Y",	""],
			"Pre_R" :			["?X |- ?Y",	""]
		},
		"RuleBigcomma" : {
			"Bigcomma_Nil_L" :	["I |- ?Y",		";;[] |- ?Y"],
			"Bigcomma_Nil_L2" :	[";;[] |- ?Y",	"I |- ?Y"],
			"Bigcomma_Nil_R" :	["?Y |- I",		"?Y |- ;;[]"],
			"Bigcomma_Nil_R2" :	["?Y |- ;;[]",	"?Y |- I"]
		},
		"RuleSwapin" : {
			"Swapin_L" :		["Phi Act?alpha ; forwK Ag?a (forwA Act?beta ?X) |- ?Y",	"forwA Act?alpha (forwK Ag?a ?X) |- ?Y"],
			"Swapin_R" :		["?Y |- (Phi Act?alpha) >> forwK Ag?a (forwA Act?beta ?X)",	"?Y |- forwA Act?alpha (forwK Ag?a ?X)"]
		},
		"RuleSwapout" : {
			"Swapout_L" :		["forwA Act?alpha (forwK Ag?a ?X) |- ?Ylist",	""],
			"Swapout_R" :		["?Ylist |- forwA Act?alpha (forwK Ag?a ?X)",	""]
		},
		"RuleCut" : {
			"SingleCut" :		["?X |- ?Y",	""]
		},
		"RuleKnowledge" : {
			"Refl_ForwK" : 		["?X |- ?Y",	"?X |- forwK Ag?a ?Y"]
		}
	}
}