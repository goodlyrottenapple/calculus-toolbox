{
	"calc_name" : "DCPL",

	"calc_structure" : {
		"Atprop" : {
			"Atprop" : {
				"type":"string",
				"ascii" : "_"
			},
			"Atprop_Freevar" : {
				"type" : "string",
				"isabelle" : "?\\<^sub>A _",
				"ascii" : "A? _",
				"latex" : "_",
				"precedence": [320, 320]
			}
		},

		"Formula" : {
			"Formula_Atprop" : {
				"type": "Atprop",
				"isabelle" : "_ \\<^sub>F",
				"precedence": [320, 330]
			},
			"Formula_Freevar" : {
				"type" : "string",
				"isabelle" : "?\\<^sub>F _",
				"ascii" : "F? _",
				"latex" : "_",
				"precedence": [340, 330]
			},

			"Formula_Bin" : {
				"type" : ["Formula", "Formula_Bin_Op", "Formula"],
				"isabelle" : "B\\<^sub>F _",
				"precedence": [330,330,330, 331]
			}
		},

		"Formula_Bin_Op" : {
			"Formula_And" : {
				"isabelle" : "\\<and>\\<^sub>F",
				"ascii" : "^",
				"latex" : "\\wedge"
			},
			"Formula_Or" : {
				"isabelle" : "\\<or>\\<^sub>F",
				"ascii" : "\\/",
				"latex" : "\\vee"
			},
			"Formula_ImpR" : {
				"isabelle" : "\\<rightarrow>\\<^sub>F",
				"ascii" : ">",
				"latex" : "\\rightarrow"
			}
		},

		"Structure" : {
			"Structure_Formula" : {
				"type": "Formula",
				"isabelle" : "_ \\<^sub>S",
				"precedence": [330, 340]
			},

			"Structure_Freevar" : {
				"type" : "string",
				"isabelle" : "?\\<^sub>S _",
				"ascii" : "? _",
				"latex" : "_",
				"precedence": [340, 340]
			},

			"Structure_Zer" : {
				"type" : "Structure_Zer_Op",
				"isabelle" : "Z\\<^sub>S",
				"precedence": [340, 340]
			},

			"Structure_Bin" : {
				"type" : ["Structure", "Structure_Bin_Op", "Structure"],
				"isabelle" : "B\\<^sub>S _",
				"precedence": [340,340,340, 341]
			}
		},

		"Structure_Zer_Op" : {
			"Structure_Neutral" : {
				"isabelle" : "I\\<^sub>S",
				"ascii" : "I",
				"latex" : "I"
			}
		},

		"Structure_Bin_Op" : {
			"Structure_Comma" : {
				"isabelle" : ";\\<^sub>S",
				"ascii" : ";",
				"latex" : ";"
			},
			"Structure_ImpR" : {
				"isabelle" : "\\<rightarrow>\\<^sub>S",
				"ascii" : ">>",
				"latex" : ">>"
			}
		},

		"Sequent" : {
			"Sequent_Structure" : {
				"type": "Structure"
			},

			"Sequent": {
				"type" : ["Structure", "Structure"],
				"isabelle" : "_ \\<turnstile>\\<^sub>S _",
				"ascii" : "_ |- _",
				"latex" : "_ \\vdash _",
				"precedence": [311,311, 310]
			}
		}
	},

	"calc_structure_rules" : {
		"RuleZer" : {
			"Id" : {
				"ascii" : "Id",
				"latex" : "Id"
			},

			"Prem" : {
				"ascii" : "Prem",
				"latex" : "Prem",
				"condition" : "(\\<lambda>x. seq = x)",
				"locale" : "Premise seq"
			},
			"Partial" : {
				"ascii" : "Partial",
				"latex" : "Partial",
				"condition" : "(\\<lambda>x. (case x of Sequent lhs rhs => struct = lhs \\<or> struct = rhs ))",
				"locale" : "Part struct"
			}
		},

		"RuleCut" : {
			"SingleCut" : {
				"ascii" : "Cut",
				"latex" : "Cut",
				"locale" : "CutFormula f",
				"premise" : "(\\<lambda>x. Some [((?\\<^sub>S ''X'') \\<turnstile>\\<^sub>S f \\<^sub>S),(f \\<^sub>S \\<turnstile>\\<^sub>S (?\\<^sub>S ''Y''))])"
			}
		},


		"RuleU" : {
			"I_impR" : {
				"ascii" : "I_impR",
				"latex" : "I >_R"
			},

			"I_impR2" : {
				"ascii" : "I_impR2",
				"latex" : "I >_R"
			},
			"ImpR_I" : {
				"ascii" : "ImpR_I",
				"latex" : ">_R I"
			},

			"ImpR_I2" : {
				"ascii" : "ImpR_I2",
				"latex" : ">_R I"
			},

			"IW_L"  : {
				"ascii" : "IW_L",
				"latex" : "\\textrm{I} W_{L}"
			}, 	
			"IW_R"  : {
				"ascii" : "IW_R",
				"latex" : "\\textrm{I} W_{R}"
			}, 	
			"W_impR_L"  : {
				"ascii" : "W_impR_L",
				"latex" : "W >_L"
			},
			"W_impR_R"  : {
				"ascii" : "W_impR_R",
				"latex" : "W >_R"
			},
			"C_L"  : {
				"ascii" : "C_L",
				"latex" : "C_L"
			}, 		
			"C_R"  : {
				"ascii" : "C_R",
				"latex" : "C_R"
			}, 		
			"E_L"  : {
				"ascii" : "E_L",
				"latex" : "E_L"
			}, 		
			"E_R"  : {
				"ascii" : "E_R",
				"latex" : "E_R"
			}, 		
			"A_R"  : {
				"ascii" : "A_R",
				"latex" : "A_R"
			}, 		
			"A_R2"  : {
				"ascii" : "A_R2",
				"latex" : "A_R"
			}, 	
			"A_L"  : {
				"ascii" : "A_L",
				"latex" : "A_L"
			}, 		
			"A_L2"  : {
				"ascii" : "A_L2",
				"latex" : "A_L"
			}
		},

		"RuleDisp" : {
			"Comma_impR_disp" : {
				"ascii" : "Comma_impR_disp",
				"latex" : "(;, >)"
			}, 					
			"Comma_impR_disp2" : {
				"ascii" : "Comma_impR_disp2",
				"latex" : "(;, >)"
			}, 				
			"ImpR_comma_disp" : {
				"ascii" : "ImpR_comma_disp",
				"latex" : "(>, ;)"
			}, 					
			"ImpR_comma_disp2" : {
				"ascii" : "ImpR_comma_disp2",
				"latex" : "(>, ;)"
			} 				
		},

		"RuleOp" : {
			"And_L" : {
				"ascii" : "And_L",
				"latex" : "\\wedge_L"
			},				
			"Or_R" : {
				"ascii" : "Or_R",
				"latex" : "\\vee_R"
			},				
			"ImpR_R" : {
				"ascii" : "ImpR_R",
				"latex" : "\\rightarrow_R"
			}
		},

		"RuleBin" : {
			"And_R" : {
				"ascii" : "And_R",
				"latex" : "\\wedge_R"
			},
			"Or_L" : {
				"ascii" : "Or_L",
				"latex" : "\\vee_L"
			},
			"ImpR_L" : {
				"ascii" : "ImpR_L",
				"latex" : "\\rightarrow_L"
			}
		}
	},

	"rules" : {
		"RuleZer" : {
			"Id" : 				["A?p |- A?p",				""],
			"Prem" : 			["?X |- ?Y",				""],
			"Partial" : 		["?X |- ?Y",				""]
		},
		"RuleU" : {
			"I_impR" : 			["I |- ?X >> ?Y", 			"?X |- ?Y"],
			"I_impR2" : 		["?X |- ?Y",				"I |- ?X >> ?Y"],
			"ImpR_I" : 			["?Y >> ?X |- I",			"?X |- ?Y"],
			"ImpR_I2" : 		["?X |- ?Y", 				"?Y >> ?X |- I"],
			"IW_L" : 			["?X |- ?Y", 				"I |- ?Y"],
			"IW_R" : 			["?X |- ?Y", 				"?X |- I"],
			"W_impR_L" :		["?Z >> ?X |- ?Y", 			"?X |- ?Z"],
			"W_impR_R" :		["?Y |- ?X >> ?Z", 			"?X |- ?Z"],
			"C_L" : 			["?X |- ?Y", 				"?X ; ?X |- ?Y"],
			"C_R" : 			["?X |- ?Y", 				"?X |- ?Y ; ?Y"],
			"E_L" : 			["?X2 ; ?X1 |- ?Y", 		"?X1 ; ?X2 |- ?Y"],
			"E_R" : 			["?X |- ?Y2 ; ?Y1", 		"?X |- ?Y1 ; ?Y2"],
			"A_R" : 			["?W |- ?X ; (?Y ; ?Z)",	"?W |- (?X ; ?Y) ; ?Z"],
			"A_R2" : 			["?W |- (?X ; ?Y) ; ?Z",	"?W |- ?X ; (?Y ; ?Z)"],
			"A_L" : 			["?X ; (?Y ; ?Z) |- ?W",	"(?X ; ?Y) ; ?Z |- ?W"],
			"A_L2" : 			["(?X ; ?Y) ; ?Z |- ?W",	"?X ; (?Y ; ?Z) |- ?W"]
		},
		"RuleDisp" : {
			"Comma_impR_disp" :	["?Y |- ?X >> ?Z", 			"?X ; ?Y |- ?Z"],
			"Comma_impR_disp2" :["?X ; ?Y |- ?Z", 			"?Y |- ?X >> ?Z"],
			"ImpR_comma_disp" :	["?X >> ?Z |- ?Y", 			"?Z |- ?X ; ?Y"],
			"ImpR_comma_disp2" :["?Z |- ?X ; ?Y", 			"?X >> ?Z |- ?Y"]
		},
		"RuleOp" : {
			"And_L" :			["F?A ^ F?B |- ?Z", 		"F?A ; F?B |- ?Z"],
			"Or_R" :			["?Z |- F?A \\/ F?B", 		"?Z |- F?A ; F?B"],
			"ImpR_R" :			["?Z |- F?A > F?B", 		"?Z |- F?A >> F?B"]
		},
		"RuleBin" : {
			"And_R" :			["?X ; ?Y |- F?A ^ F?B",	"?X |- F?A", "?Y |- F?B"],
			"Or_L" :			["F?A \\/ F?B |- ?X ; ?Y",	"F?A |- ?X", "F?B |- ?Y"],
			"ImpR_L" :			["F?A > F?B |- ?X >> ?Y",	"?X |- F?A", 	"F?B |- ?Y"]
		},
		"RuleCut" : {
			"SingleCut" :		["?X |- ?Y",	""]
		}
	}
}
